#!/bin/bash
echo ""
echo "*******************************************************"
echo "** DOCKWARE IMAGE: {{ orca.image }}"
echo "** Tag: {{ orca.tag }}"
echo "** Version: {{ version }}"
echo "** Built: $(cat /build-date.txt)"
echo "** ImageUrl: https://hub.docker.com/layers/dockware/production"
echo "** Copyright {{ 'now' | date('Y') }} dasistweb GmbH"
echo "** CHANGELOG: /var/www/CHANGELOG.md"
echo "*******************************************************"
echo ""
echo "launching dockware...please wait..."
echo ""

echo "PHP: $(php -v | grep cli)"
echo ""
set -e

source /etc/apache2/envvars

#the SVR_UNIT variable is needed to make tests on this image, don't use it to skip the root pwd generation!
if [ ! -f /var/www/.pwdset ] && [ $SVR_UNIT = 0 ] ; then
    echo "exit bootup, you have to set a root password other then default!"
    #this fil will be created ba the dockerfile maintainer of your project Dockerfile, so we know we don√§t have to create a new password for root
    exit 1
fi;


# this is important to automatically use the bashrc file
# in the "exec" command below when using a simple docker runner command
#export BASH_ENV=/var/www/.bashrc
CONTAINER_STARTUP_DIR=$(pwd)

# it's possible to add a custom boot script on startup.
# so we test if it exists and just execute it
file="/var/www/boot_start.sh"
if [ -f "$file" ] ; then
    echo "execute $file"
    sh $file
fi


# before starting any commands
# we always need to ensure we are back in our
# configured WORKDIR of the container
cd $CONTAINER_STARTUP_DIR


cd /var/www/html
# --------------------------------------------------

# now let's check if we have a custom boot script that
# should run after our other startup scripts.
file="/var/www/boot_end.sh"
if [ -f "$file" ] ; then
    echo "execute $file"
    sh $file
fi


# always execute custom commands in here.
# if a custom command is provided, then the container
# will automatically exit after it.
# that's somehow just how it works.
# otherwise it will continue with the code below
if [[ $@ != "" ]]; then
    echo "execute given command: $@"
    #make sure docker run ... gets executed as web user, this is important for cronjobs in kubernetes for example
    #if a command is passed we will exit after it, so no appache gets started and no fpm, this safes boot up time
    "$@"
    echo "finished command"
    exit
fi


# we still need this to allow custom events
# such as our BUILD_PLUGIN feature to exit the container
if [[ ! -z "$DOCKWARE_CI" ]]; then
    # CONTAINER WAS STARTED IN NON-BLOCKING CI MODE...."
    # DOCKWARE WILL NOW EXIT THE CONTAINER"
    echo ""
else
  # APACHE
    # sometimes the internal docker structure leaves
    # some pid files existing. the container will be recreated....but
    # in reality it's not! thus there might be the problem
    # that an older pid file exists, which leads to the following error:
    #   - "httpd (pid 13) already running"
    # to avoid this, we simple remove an existing file
    echo "DOCKWARE: testing and starting Apache..."
    apache2ctl configtest
    #need to be used 1 an dnot self as docker on monitors the process 1
    sudo /etc/init.d/apache2 restart
    echo "Apache DocRoot: ${APACHE_DOCROOT}"
    echo "DOCKWARE: start log output here"

    #1 make sure we are www-data and not sudo/root
    # otherwise we would not be able to log to the proc/1 channel as www-data
    exec /usr/sbin/php-fpm$PHP_VERSION -F
fi

