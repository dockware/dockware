# Official Dockware Image
# Tag: {{ orca.tag }}
# Copyright 2022 dasistweb GmbH
#
FROM {{ base_image }}
LABEL title="Dockware {{ orca.image }}:{{ orca.tag }}" \
      version="{{version}}" \
      maintainer="dasistweb GmbH"


# add our changelog to the containers
ADD ./assets/CHANGELOG.md /var/www/CHANGELOG.md
#this conf is needed for enconf command ...
ADD ./config/apache/production/http2.conf /etc/apache2/conf-available/http2.conf
COPY ./config/apache/production/apache2.conf /tmp/apache2.conf
COPY ./config/apache/production/ports.conf /tmp/ports.conf
COPY ./config/apache/production/sites.conf /tmp/sites.conf

COPY ./config/php/production/general.ini /tmp/general.ini
COPY ./config/php/production/99-shopware-performance.ini /tmp/99-shopware-performance.ini
COPY ./config/php/production/cli.ini /tmp/cli.ini
COPY ./config/php/production/php-fpm.conf /tmp/php-fpm.conf


## ***********************************************************************
##  IMAGE VARIABLES
## ***********************************************************************

ENV TZ Europe/Berlin
ENV PHP_VERSION {{php.default_version}}
ENV APACHE_DOCROOT {{ apache.docroot }}
ENV TIDEWAYS_KEY not-set
ENV TIDEWAYS_CONNECTION not-set
ENV SVR_UNIT 0


#ENV BASH_ENV /var/www/.bashrc
RUN date >/build-date.txt \
 && mkdir -p /var/www \
 && echo "export TZ=${TZ}" >> /etc/profile \
 && echo "export PHP_VERSION={{php.default_version}}" >> /etc/profile \
 && echo "export APACHE_DOCROOT=${APACHE_DOCROOT}" >> /etc/profile \


## ***********************************************************************
##  BASE REQUIREMENTS
## ***********************************************************************
&& apt-get update \
    && apt-get install -y --no-install-recommends gosu \
    && apt-get install -y --no-install-recommends wget \
    && apt-get install -y --no-install-recommends curl \
    && apt-get install -y --no-install-recommends unzip \
    && apt-get install -y --no-install-recommends bzip2 \
    && apt-get install -y --no-install-recommends ssmtp \
    && apt-get install -y --no-install-recommends lsof \
    && apt-get install -y --no-install-recommends vim \
    && apt-get install -y --no-install-recommends nano \
    && apt-get install -y --no-install-recommends jq \
    && apt-get install -y --no-install-recommends gnupg2 \
    && apt-get install -y --no-install-recommends gpg-agent \
    && apt-get install -y --no-install-recommends make \
    && apt-get install -y --no-install-recommends sudo \
    && apt-get install -y --no-install-recommends openssl \



    # TIMEZONE SETTINGS
    # otherwise we would have an interactive input dialog
    && ln -fs /usr/share/zoneinfo/Europe/Berlin /etc/localtime \

    && apt-get install -y --no-install-recommends tzdata \
    && dpkg-reconfigure --frontend noninteractive tzdata  \

## ***********************************************************************
##  USER MANAGEMENT
## ***********************************************************************
# set hard root pwd for production purpose, you will have to do this in your own dockerfile
#this way we make sure you don't forget to change it yourself and otherwise no one knows the root pwd which is also fine
&& PASSWORD=$(openssl rand -base64 24) \
&& echo "root:$PASSWORD" | chpasswd \
    # set password for www-data, and also
    # avoid shell login (we have a separate user for that)
    && echo 'www-data:www-data' | chpasswd \
    && usermod -s /usr/sbin/nologin www-data \
    # -------------------------------------------------
    #&& chown 33:33 /var/www/.bashrc \
    # -------------------------------------------------
    && echo "export BASH_ENV=${BASH_ENV}" >> /etc/profile \

#add a useer as which the container will act
&& adduser --disabled-password --uid 5577 --gecos "" --ingroup www-data web \
    && usermod -m -d /var/www web | true \
    #make sure the group sudo is not allowed to any command
    && sed -i /etc/sudoers -re 's/^%sudo.*//g' \
    #allow web user to restart apache
    # and make sure we have a plain sudoers file
    && echo "%www-data ALL=NOPASSWD: /etc/init.d/apache2 start" > /etc/sudoers \
    && echo "%www-data ALL=NOPASSWD: /etc/init.d/apache2 restart" >> /etc/sudoers \
    && echo "%www-data ALL=NOPASSWD: /etc/init.d/apache2 stop" >> /etc/sudoers \
    && sed -i 's/web:x:5577:33:/web:x:33:33:/g' /etc/passwd \

## ***********************************************************************
##  APACHE INSTALLATION
## ***********************************************************************

{% include 'template/components/apache2/install.sh.twig' %}

#need to be added after installation
&& cat /tmp/apache2.conf >| /etc/apache2/apache2.conf \
&& cat /tmp/ports.conf >| /etc/apache2/ports.conf \
&& cat /tmp/sites.conf >| /etc/apache2/sites-enabled/000-default.conf \


## ***********************************************************************
##  PHP INSTALLATION
## ***********************************************************************

{% include "template/components/php/#{ php.default_version }/install.sh.twig" %}

&& echo 'deb https://packages.tideways.com/apt-packages-main any-version main' | tee /etc/apt/sources.list.d/tideways.list \
&& wget -qO - https://packages.tideways.com/key.gpg | apt-key add - \
&& apt-get -y update  \
&& apt-get -y install tideways-php  \

&& cat /tmp/general.ini >| /etc/php/{{ php.default_version }}/fpm/conf.d/99-dockware.ini \
&& cat /tmp/99-shopware-performance.ini >| /etc/php/{{ php.default_version }}/fpm/conf.d/99-shopware-performance.ini \
&& cat /tmp/general.ini >| /etc/php/{{ php.default_version }}/cli/conf.d/99-dockware.ini \
&& cat /tmp/cli.ini >| /etc/php/{{ php.default_version }}/cli/conf.d/999-dockware-cli.ini \
&& cat /tmp/php-fpm.conf >| /etc/php/{{ php.default_version }}/fpm/pool.d/zzz-dockware.conf \


# remove pecl again
&& apt-get remove -y dh-php \

#make sure the installation runs also in default php version
&&  update-alternatives --set php /usr/bin/php{{ php.default_version }} > /dev/null 2>&1 \
# make sure the installation runs using our default php version
&& service php{{ php.default_version }}-fpm stop > /dev/null 2>&1 && \
    service php{{ php.default_version }}-fpm start && \
    update-alternatives --set php /usr/bin/php{{ php.default_version }} > /dev/null 2>&1 \


# make sure our php user has rights on the session
&& chown www-data:www-data -R /var/lib/php/sessions \

# remove the standard apache index file
&& mkdir -p /var/www/html \
    && rm -rf /var/www/html/* \
    && mkdir -p /var/www/html/public \
    && chown -R www-data:www-data /var/www/html \

# make sure the configured log folder exists and is writeable
&& chmod -R 0777 /var/www \
    && apt-get install -y --no-install-recommends rsync \
    && apt-get install -y --no-install-recommends jpegoptim \
    && apt-get install -y --no-install-recommends screen \
    && apt-get install -y --no-install-recommends mysql-client \
    && apt-get install -y --no-install-recommends daemon


ADD entrypoint.sh /entrypoint.sh
RUN chmod 755 /*.sh \

&& chown 33:33 -R /var/www/html \
    #&& chmod -R 0777 /var/www \
    && mkdir /var/log/php -p  \
    && touch /var/log/php/cli_errors.log  \
    && touch /var/log/php/fpm_errors.log  \
    && touch /var/log/apache2/error.log  \
    #&& chgrp -R www-data /var/log/apache2 \
    && chown -R www-data:www-data /var/log/php  \
    && chmod 0755 /var/log/php \
    #&& chmod 0755 /var/log/apache2/ \
    #&& find /var/log/apache2/ -type f -exec chmod 777 {} \;  \
    && mkdir -p /var/www/log \
    && chown -R www-data:www-data /var/www/log \
    && rm -rf /tmp/* \
    && /bin/bash -c  "source /etc/apache2/envvars; apache2 -V "

## ***********************************************************************
## SWITCH TO NORMAL USER (NOT ROOT ANYMORE!)
## everything down here is now done as our www-data / dockware user
## just like you would do it manually in the container
USER web
## ***********************************************************************

# make the apache folder the working directory
WORKDIR /var/www/html

## ***********************************************************************
##  POST BUILD
## ***********************************************************************

ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]

